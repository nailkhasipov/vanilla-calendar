!function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=1)}([function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var i=(o=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[t].concat(a).concat([i]).join("\n")}var o;return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];"number"==typeof a&&(r[a]=!0)}for(i=0;i<e.length;i++){var o=e[i];"number"==typeof o[0]&&r[o[0]]||(t&&!o[2]?o[2]=t:t&&(o[2]="("+o[2]+") and ("+t+")"),n.push(o))}},n}},function(e,n,t){"use strict";function r(e){const n=[[]],t=new Date(e),r=new Date(t.getFullYear(),t.getMonth(),1),i=new Date(t.getFullYear(),t.getMonth()+1,0),a=r.getDay(),o=i.getDate();for(var s=1;s<a;s++)n[0].push("");for(let e=1;e<=o;e++){let t=n[n.length-1],r=String(e);7==t.length?n.push([r]):t.push(r)}return n}function i(e){const n=function(e){var n=new Date(e),t=""+(n.getMonth()+1),r=""+n.getDate(),i=n.getFullYear();t.length<2&&(t="0"+t);r.length<2&&(r="0"+r);return[i,t,r].join("-")}(e);return`\n    <form onsubmit="calendar.newEvent(); return false;" class="event-form">\n      <h2 class="event-form__title">New Event</h2>\n      <label class="event-form__label">Event name</label>\n      <input id="event_name" class="event-form__name" type="text" placeholder="New event"/>\n\n      <label class="event-form__label">Starts</label>\n      <input id="event_start_date" class="event-form__date" type="date" value="${n}" />\n      <input id="event_start_time" class="event-form__time" type="time" value="12:00" />\n\n      <label class="event-form__label">Ends</label>\n      <input id="event_end_date" class="event-form__date" type="date" value="${n}" />\n      <input id="event_end_time" class="event-form__time" type="time" value="12:30" />\n\n      <label class="event-form__label">Comment</label>\n      <textarea id="event_comment" class="event-form__comment"></textarea>\n\n      <input class="event-form__submit" type="submit" value="Create"/>\n    </form>\n  `}function a(){let e=document.createElement("UL");e.className="labels";for(let n=0;n<24;n++){let t=document.createElement("LI");t.innerText=`${String(n).padStart(2,"0")}:00`,e.appendChild(t)}return e.outerHTML}function o(e,n){const t=new Date(e),r=t.setHours(0,0,0,0),i=t.setHours(23,59,59,999),o=n.filter(e=>e.start>r&&e.start<i);return`<div class="views view-day" id="view-day">\n      ${a()}\n      <div class="day-grid">\n        ${'<div class="hour"></div>'.repeat(24)}\n        <div class="day-events">\n          ${o.map(e=>(function(e){const n=document.createElement("DIV");n.className="event",n.innerText=e.name;const t=new Date(e.start),r=new Date(e.end),i=.6*(60*t.getHours()+t.getMinutes()),a=.6*(60*r.getHours()+r.getMinutes())-i;return n.style.top=`${i}px`,n.style.height=`${a}px`,n.outerHTML})(e))}\n        </div>\n      </div>\n    </div>`}function s(e){const n=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],t=document.createElement("DIV");t.className="days";const r=function(e){const n=(e=new Date(e)).getDay(),t=e.getDate()-n+(0==n?-6:1);return new Date(e.setDate(t)).getDate()}(e);let i=0;for(let e=r;e<r+7;e++){const r=document.createElement("DIV");r.className="day-grid",r.innerHTML=`<h3 class="day-label">${n[i]} ${e}</h3>${'<div class="hour"></div>'.repeat(24)}`,t.appendChild(r),i++}return`<div class="views view-week" id="view-week">\n      ${a()}\n      ${t.outerHTML}\n    </div>`}function l(e){return`<div class="views view-month" id="view-month">\n      ${function(e){const n=r(e),t=document.createElement("table");t.className="month-table";for(var i=0;i<n.length;i++)for(var a=t.insertRow(i),o=0;o<n[i].length;o++){const e=a.insertCell(-1),t=document.createElement("P");t.innerText=n[i][o],e.appendChild(t)}return t.outerHTML}(e)}\n    </div>`}t.r(n);var d=class{constructor(e){this.root=e,this.view="day",this.date=Date.now(),this.events=JSON.parse(localStorage.getItem("events"))||[],e.innerHTML=this.render()}changeView(e){this.view=e,this.root.innerHTML=this.render()}newEvent(){const e={name:document.querySelector("#event_name").value,start:c(document.querySelector("#event_start_date").value,document.querySelector("#event_start_time").value),end:c(document.querySelector("#event_end_date").value,document.querySelector("#event_end_time").value)};this.events.push(e),localStorage.setItem("events",JSON.stringify(this.events))}prev(){this.date-=864e5,this.root.innerHTML=this.render()}next(){this.date+=864e5,this.root.innerHTML=this.render()}render(){let e;switch(this.view){case"day":e=o(this.date,this.events);break;case"week":e=s(this.date);break;case"month":e=l(this.date)}return`<div class="calendar">\n        <div class="top">\n        <div class="navigation">\n          <button>TODAY</button>\n          <button onclick="calendar.prev()"><</button>\n          <button onclick="calendar.next()">></button>\n        </div>\n        <h2 class="date-info">${n=this.date,new Date(n).toLocaleDateString("en-EN",{year:"numeric",month:"long"})}</h2>\n        <div class="view-change">\n          <button onclick="calendar.changeView('day')">DAY</button>\n          <button onclick="calendar.changeView('week')">WEEK</button>\n          <button onclick="calendar.changeView('month')">MONTH</button>\n        </div>\n        </div>\n        <div class="main">\n          <div class="sidebar">\n            <div class="sidebar-month" id="sidebar-month">\n              ${function(e){const n=String(new Date(e).getDate()),t=r(e),i=document.createElement("table");for(var a=0;a<t.length;a++)for(var o=i.insertRow(a),s=0;s<t[a].length;s++){var l=o.insertCell(-1);l.innerHTML=t[a][s],l.setAttribute("align","center"),t[a][s]===n&&(l.className="today")}return i.outerHTML}(this.date)}\n            </div>\n            ${i(this.date)}\n          </div>\n          <div class="view">\n            ${e}\n          </div>\n        </div>\n      </div>`;var n}};function c(e,n){const[t,r,i]=e.split("-"),[a,o]=n.split(":");return new Date(t,r-1,i,a,o).getTime()}t(7);window.Calendar=d},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var i,a=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?t+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,n,t){var r,i,a={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(e){var n={};return function(e){if("function"==typeof e)return e();if(void 0===n[e]){var t=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}}(),l=null,d=0,c=[],u=t(2);function f(e,n){for(var t=0;t<e.length;t++){var r=e[t],i=a[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(g(r.parts[o],n))}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(g(r.parts[o],n));a[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,n){for(var t=[],r={},i=0;i<e.length;i++){var a=e[i],o=n.base?a[0]+n.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[o]?r[o].parts.push(s):t.push(r[o]={id:o,parts:[s]})}return t}function h(e,n){var t=s(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),c.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(e.insertInto+" "+e.insertAt.before);t.insertBefore(n,i)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=c.indexOf(e);n>=0&&c.splice(n,1)}function m(e){var n=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),b(n,e.attrs),h(e,n),n}function b(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function g(e,n){var t,r,i,a;if(n.transform&&e.css){if(!(a=n.transform(e.css)))return function(){};e.css=a}if(n.singleton){var o=d++;t=l||(l=m(n)),r=x.bind(null,t,o,!1),i=x.bind(null,t,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(n,e.attrs),h(e,n),n}(n),r=function(e,n,t){var r=t.css,i=t.sourceMap,a=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||a)&&(r=u(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var o=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}.bind(null,t,n),i=function(){v(t),t.href&&URL.revokeObjectURL(t.href)}):(t=m(n),r=function(e,n){var t=n.css,r=n.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),i=function(){v(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else i()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=o()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=p(e,n);return f(t,n),function(e){for(var r=[],i=0;i<t.length;i++){var o=t[i];(s=a[o.id]).refs--,r.push(s)}e&&f(p(e,n),n);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var w,y=(w=[],function(e,n){return w[e]=n,w.filter(Boolean).join("\n")});function x(e,n,t,r){var i=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(n,i);else{var a=document.createTextNode(i),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(a,o[n]):e.appendChild(a)}}},function(e,n,t){(e.exports=t(0)(!1)).push([e.i,".day-grid .hour {\n  height: 40px;\n  border-top: 1px solid #e2e2e2;\n}\n\n.view-day {\n  padding-left: 40px;\n  padding-top: 10px;\n}\n\n.calendar .main .view-day .day-grid {\n  position: relative;\n  width: 100%;\n}\n\n.day-events {\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.event {\n  position: absolute;\n  width: 100%;\n  height: 50px;\n  background: #91a7ff;\n  color: white;;\n}",""])},function(e,n,t){(e.exports=t(0)(!1)).push([e.i,".event-form__title {\n  font-weight: 300;\n}\n\n.event-form__label {\n  display: block;\n  margin: .25em 0;\n}\n\n.event-form__name, .event-form__date, .event-form__time, .event-form__comment {\n  padding: .5em .6em;\n  border: 1px solid #ccc;\n  box-shadow: inset 0 1px 3px #ddd;\n  border-radius: 4px;\n  vertical-align: middle;\n  margin: .25em 0;\n}\n\n.event-form__name, .event-form__comment {\n  display: block;\n  width: 100%;\n}\n\n.event-form__comment {\n  resize: none;\n}\n\n.event-form__submit {\n  float: right;\n  margin-top: 10px;\n}",""])},function(e,n,t){(n=e.exports=t(0)(!1)).i(t(5),""),n.i(t(4),""),n.push([e.i,"* {\n  box-sizing: border-box;\n}\n\nhtml, body {\n  width: 100%;\n  height: 100%;\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0;\n  padding: 0;\n  color: #2e2e2e;\n}\n\n#calendar {\n  height: 100%;\n}\n\n.calendar {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.calendar .top {\n  height: 40px;\n  width: 100%;\n  border-bottom: 1px solid #eee;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 0 15px;\n}\n\n.calendar .top .navigation, .calendar .top .view-change {\n  display: flex;\n  align-items: center;\n}\n\n.calendar .main {\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n}\n\n.calendar .main .sidebar {\n  width: 300px;\n  border-right: 1px solid #eee;\n}\n\n.calendar .sidebar {\n  padding: 15px;\n}\n\n.calendar .sidebar #sidebar-month table {\n  margin-top: 30px;\n  width: 100%;\n}\n\n.calendar .sidebar #sidebar-month table tr {\n  height: 30px;\n}\n\n.calendar .main .view {\n  flex: 1;\n  display: flex;\n  overflow: scroll;\n}\n\n.calendar .main .views {\n  flex: 1;\n  position: relative;\n}\n\n.labels {\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  left: 0;\n  font-size: 13px;\n  color: #ccc;\n}\n\n.labels li {\n  list-style: none;\n  height: 40px;\n}\n\n.calendar .main .view-week {\n  padding-left: 40px;\n  padding-top: 10px;\n  display: flex;\n}\n\n.view-week .labels {\n  top: 60px;\n}\n\n.calendar .main .view-month {\n  /* display: none; */\n}\n\n.view-month table {\n  width: 100%;\n  height: 100%;\n  border-collapse: collapse;\n}\n\n.view-month th, .view-month td {\n  border: 1px solid #e2e2e2;\n}\n\n.calendar .main .view-week .days {\n  display: flex;\n  flex: 1;\n}\n\n.calendar .main .view-week .day-grid {\n  width: 14.285713%;\n}\n\n.calendar .main .view-week .day-grid .hour {\n  border-right: 1px solid #e2e2e2;\n}\n\n.calendar .main .view-week .day-grid:last-child .hour {\n  border-right: none;\n}\n\n.day-label {\n  font-weight: 300;\n  color: #222;\n  margin: 0;\n  height: 60px;\n}\n\n.month-table td {\n  vertical-align: top;\n}\n\n.sidebar-month td.today {\n  color: white;\n  background: #333;\n  border-radius: 50%;\n}\n\n.sidebar-month td {\n  width: 36px;\n  height: 36px;\n}\n\n.month-table p {\n  text-align: right;\n  margin: 0;\n}\n\n.date-info {\n  margin: 0;\n  font-weight: 300;\n  line-height: 40px;\n}\n\n.new-event-form {\n  margin-top: 30px;\n}\n\n.form-field {\n  width: 100%;\n}",""])},function(e,n,t){var r=t(6);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(3)(r,i);r.locals&&(e.exports=r.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,